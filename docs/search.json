[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jason Lee",
    "section": "",
    "text": "I’m a Data Analyst with 5 years of experience working in the banking industry. I’m a Chartered Financial Analyst (CFA) and a current master of data science student at UBC."
  },
  {
    "objectID": "posts/black_scholes.html",
    "href": "posts/black_scholes.html",
    "title": "Black Scholes Option Pricing Model",
    "section": "",
    "text": "Link to project"
  },
  {
    "objectID": "posts/vancouver_real_estate.html",
    "href": "posts/vancouver_real_estate.html",
    "title": "Vancouver Real Estate Screener",
    "section": "",
    "text": "Link to project"
  },
  {
    "objectID": "posts/stock_correlations.html",
    "href": "posts/stock_correlations.html",
    "title": "Calculating Stock Correlations",
    "section": "",
    "text": "import pandas as pd\nimport yfinance as yf\nimport seaborn as sns\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/stock_correlations.html#downloading-stock-data-from-yfinance",
    "href": "posts/stock_correlations.html#downloading-stock-data-from-yfinance",
    "title": "Calculating Stock Correlations",
    "section": "Downloading Stock Data from yfinance",
    "text": "Downloading Stock Data from yfinance\n\nuniverse = pd.read_csv(\"../data/universe.csv\")\n\n# Date range\nstart = '2021-01-01'\nend = '2024-09-22'\n\n# Tickers of assets\nassets = universe['Ticker'].to_list()\nassets.sort()\n\n# Downloading data\ndata = yf.download(assets, start = start, end = end)\ndata = data.loc[:, ('Close')]\ndata.columns = assets\n\ndata\n\n[                       0%                       ][*****                 10%                       ]  2 of 20 completed[*******               15%                       ]  3 of 20 completed[*******               15%                       ]  3 of 20 completed[************          25%                       ]  5 of 20 completed[************          25%                       ]  5 of 20 completed[*****************     35%                       ]  7 of 20 completed[*******************   40%                       ]  8 of 20 completed[**********************45%                       ]  9 of 20 completed[**********************50%                       ]  10 of 20 completed[**********************55%*                      ]  11 of 20 completed[**********************60%****                   ]  12 of 20 completed[**********************60%****                   ]  12 of 20 completed[**********************70%*********              ]  14 of 20 completed[**********************75%***********            ]  15 of 20 completed[**********************80%*************          ]  16 of 20 completed[**********************85%****************       ]  17 of 20 completed[**********************90%******************     ]  18 of 20 completed[**********************95%*********************  ]  19 of 20 completed[*********************100%***********************]  20 of 20 completed\n\n\n\n\n\n\n\n\n\nACWX\nBND\nDBC\nEWJ\nFLIN\nFXI\nGLD\nINDA\nIWV\nQQQ\nREET\nTIP\nVCN.TO\nVEU\nVGK\nVGT\nVNQ\nVTI\nVXF\nXIU.TO\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021-01-04\n47.711861\n78.622475\n13.149570\n61.875252\n25.043995\n42.370186\n182.330002\n37.514973\n209.478271\n301.685425\n20.478315\n109.025612\n31.250051\n51.620850\n53.464718\n337.758484\n70.930550\n180.991165\n154.595184\n23.268791\n\n\n2021-01-05\n48.409817\n78.488556\n13.518332\n62.449890\n25.429298\n43.523239\n182.869995\n38.194351\n211.254089\n304.172607\n20.566353\n108.991486\n31.570019\n52.412983\n53.946621\n340.535034\n71.034149\n182.453293\n156.872391\n23.490656\n\n\n2021-01-06\n48.615627\n78.140388\n13.536322\n63.191364\n25.371410\n43.019924\n179.899994\n38.073364\n212.877960\n299.959045\n20.733633\n108.667290\n31.845545\n52.694630\n54.586227\n334.884857\n71.154999\n184.094650\n160.254929\n23.721390\n\n\n2021-01-07\n48.875122\n77.979713\n13.599280\n63.061596\n25.377102\n43.321915\n179.479996\n37.896542\n216.363068\n307.215698\n20.583963\n108.599022\n32.218838\n52.879459\n54.752712\n344.418365\n71.016884\n187.047134\n163.599319\n24.005369\n\n\n2021-01-08\n49.537296\n77.908310\n13.707211\n64.220139\n25.889584\n44.218739\n173.339996\n38.789978\n217.512161\n311.165833\n20.724831\n108.172478\n32.227726\n53.627590\n55.006802\n346.932770\n71.707451\n187.952713\n163.856567\n24.040869\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-09-16\n54.599186\n74.711632\n20.714136\n69.455086\n41.408691\n25.626524\n238.660004\n57.712471\n318.677185\n471.815094\n26.472399\n110.249245\n47.879375\n60.079185\n69.305176\n564.339111\n97.203011\n276.027222\n177.350891\n35.702126\n\n\n2024-09-17\n54.411861\n74.612862\n20.856533\n68.637848\n41.279507\n25.951660\n237.339996\n57.543690\n319.015076\n472.064362\n26.277531\n110.209442\n47.795544\n59.844006\n69.048706\n564.049866\n96.525330\n276.305450\n178.265686\n35.612873\n\n\n2024-09-18\n54.273834\n74.385681\n20.723629\n68.322769\n41.021137\n25.803871\n235.509995\n57.245846\n318.041168\n470.020538\n26.199587\n109.801559\n47.657463\n59.667614\n68.881020\n561.447083\n96.407478\n275.609863\n178.325333\n35.483948\n\n\n2024-09-19\n55.348469\n74.385681\n21.093864\n70.134476\n41.339130\n26.730011\n239.169998\n57.692612\n323.606384\n481.904633\n26.287275\n110.129860\n48.190056\n60.814129\n70.074570\n578.051208\n96.427124\n280.280334\n181.885086\n35.890553\n\n\n2024-09-20\n54.944248\n74.375809\n21.093864\n70.173851\n41.985054\n26.749716\n242.210007\n58.318089\n322.741791\n480.987396\n26.141127\n109.980637\n48.197994\n60.427479\n69.027435\n576.026733\n96.044083\n279.694061\n180.681946\n35.900475\n\n\n\n\n954 rows × 20 columns"
  },
  {
    "objectID": "posts/stock_correlations.html#calculating-stock-returns-and-correlation",
    "href": "posts/stock_correlations.html#calculating-stock-returns-and-correlation",
    "title": "Calculating Stock Correlations",
    "section": "Calculating stock returns and correlation",
    "text": "Calculating stock returns and correlation\n\n#Calculating Returns\nreturns = data.pct_change().dropna()\n\ncorrelation_matrix = returns.corr()\n\n# Plot the heatmap\nplt.figure(figsize=(20, 20))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\nplt.title('Correlation Matrix of Selected Stocks')\nplt.show()\n\n/var/folders/49/wztx6mrd3qd9qcgjnk_y96040000gn/T/ipykernel_97769/4222160605.py:2: FutureWarning:\n\nThe default fill_method='pad' in DataFrame.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values."
  },
  {
    "objectID": "posts/portfolio_optimisation.html",
    "href": "posts/portfolio_optimisation.html",
    "title": "A Practical Guide to Portfolio Optimization in Python",
    "section": "",
    "text": "Eggs in a Basket: Why Diversify?\nAs the saying goes, “Don’t put all your eggs in one basket”. Diversification is a cornerstone of investing, designed to protect portfolios from market volatility and unforeseen events. However, diversification raises an important question: how should money be allocated across individual investments?  For those with a background in data science or finance, leveraging analytical techniques can provide an edge in taking control of your investments. A systematic approach to portfolio allocation is key to staying disciplined and removing emotions from the decision-making process. Thanks to accessible Python libraries like Pandas, yfinance and Riskfolio-Lib, retail investors now have the tools to apply techniques used by wealth managers and financial institutions. In this tutorial, we’ll explore how to perform mean-variance optimization (MVO) in python to construct an efficient and optimal portfolio. \n\n\n\nBroken eggs. Broken dreams\n\n\n\n\nWhat is Mean-Variance Optimization (MVO)?\nBefore jumping into the code we should first get a high level understanding of MVO. Mean-Variance Optimization (MVO), introduced by Harry Markowitz in 1952, plays a critical role in portfolio management by providing a systematic framework for balancing risk and return. MVO helps investors construct a portfolio that maximizes expected return for a given level of risk. Simply put, MVO is a great tool that helps investors efficiently achieve diversification such that they don’t put all their eggs in one basket.\n\n\nBackground\nI’m Jason Lee, a Chartered Financial Analyst (CFA) with over five years of experience in the financial industry. Currently, I’m pursuing a Master of Data Science at the University of British Columbia to strengthen my technical skillset and complement my finance background. \nThis tutorial is not financial advice, nor am I a financial advisor. Instead, my goal is to share a practical framework for applying data-driven techniques to portfolio optimization. Keep in mind that all investing involves risk, so approach these concepts with caution.\n\n\nWorkflow\n\nProblem Definition: Allocating Investments Efficiently\nImports\nData Collection: Retreiving data from yfinance (Yahoo finance)\nPortfolio Construction: Using Riskfolio-Lib to create efficient portfolios\nVisualization: Displaying results through efficient frontiers and allocation breakdowns\n\n\n\n0. Problem Definition: Allocating Investments Efficiently\nInvesting involves more than just selecting stocks—it’s about determining the right mix of investments to achieve your financial goals while managing risk. This balance is hard to acheive because:\n\nTrade-Off Between Risk and Return: Investors want to maximize returns, but doing so often increases exposure to risk.\nComplex Interactions: The performance of assets is rarely independent. Correlations between assets can amplify or reduce portfolio risk.\nAllocation Decisions: Determining how much money to allocate to each asset in a way that achieves an efficient trade-off between risk and return is not always intuitive.\n\nTo illustrate the concept of diversification and optimal allocation, we’ll use a sample portfolio. This portfolio includes a diverse mix of stocks, gold, real estate, and bonds to represent different asset classes.\n\n\n\n\n\n\n\n\n\nTicker\nName\nSector\n\n\n\n\n0\nAAPL\nApple Inc.\nTechnology\n\n\n1\nMSFT\nMicrosoft Corp.\nTechnology\n\n\n2\nJNJ\nJohnson & Johnson\nHealthcare\n\n\n3\nXOM\n\\tExxon Mobil Corp.\nEnergy\n\n\n4\nPG\nProcter & Gamble\nConsumer Goods\n\n\n5\nJPM\nJPMorgan Chase\nFinancials\n\n\n6\nTSLA\nTesla Inc.\nAutomotive/Tech\n\n\n7\nKO\nCoca-Cola Co.\nConsumer Staples\n\n\n8\nGLD\n\\tSPDR Gold Shares ETF\nGold\n\n\n9\nVNQ\nVanguard Real Estate ETF\nReal Estate (REITs)\n\n\n10\nAGG\n\\tiShares Core U.S. Aggregate Bond ETF\nBonds\n\n\n\n\n\n\n\n\n\n1. Imports\n\nimport pandas as pd\nimport riskfolio as rp\nimport yfinance as yf\nimport matplotlib.pyplot as plt\n\n\n\n2. Data Collection: Retreiving data from yfinance (Yahoo finance)\nTo apply Mean-Variance Optimization (MVO) effectively, we first need to gather historical price data for the assets in our sample portfolio. We can do this using the yfinance library. While its data coverage may not match that of premium providers, yfinance is an excellent free resource for beginners learning quantitative finance concepts.\nSteps:\n\nDefine the investment universe: Specify the list of assets in the portfolio and assign them to the tickers variable.\nExtract Historical Prices: Use yf.download() to extract daily historical asset prices and store them in the data variable as a Pandas DataFrame. We’ll subset the dataset to retreive only the Close price.\nCalculate Daily Returns: Using the pct_change() function, we’ll compute the daily percentage returns for each asset, which are required for MVO. These returns will be stored in the returns DataFrame.\n\nNote:\n\nFor this tutorial, we are using a 1 year time period (Jan 2024 - Jan 2025) to ensure that the portfolio reflects recent market trends and conditions.\nDaily returns provide a granular view of asset behavior, which is well suited for portfolio optimisation.\n\n\n# Define tickers\ntickers = ['AAPL', 'MSFT', 'JNJ', 'XOM', 'PG', 'JPM', 'TSLA', 'KO', 'GLD', 'VNQ', 'AGG'] \n\n# Download historical price data\ndata = yf.download(tickers, start=\"2024-01-01\", end=\"2025-01-01\")['Close']\n\n# Calculate daily returns\nreturns = data.pct_change().dropna()\nreturns.head()\n\n[                       0%                       ][                       0%                       ][*************         27%                       ]  3 of 11 completed[*****************     36%                       ]  4 of 11 completed[*****************     36%                       ]  4 of 11 completed[**********************55%*                      ]  6 of 11 completed[**********************64%******                 ]  7 of 11 completed[**********************73%**********             ]  8 of 11 completed[**********************82%**************         ]  9 of 11 completed[**********************91%*******************    ]  10 of 11 completed[*********************100%***********************]  11 of 11 completed\n\n\n\n\n\n\n\n\nTicker\nAAPL\nAGG\nGLD\nJNJ\nJPM\nKO\nMSFT\nPG\nTSLA\nVNQ\nXOM\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2024-01-03\n-0.007488\n0.000506\n-0.008337\n0.006251\n-0.004358\n0.002340\n-0.000728\n-0.006051\n-0.040134\n-0.023900\n0.008402\n\n\n2024-01-04\n-0.012700\n-0.004047\n0.001005\n-0.002112\n0.006636\n-0.003336\n-0.007178\n0.005479\n-0.002181\n-0.001839\n-0.008719\n\n\n2024-01-05\n-0.004013\n-0.002337\n0.000158\n0.003113\n0.005017\n-0.001506\n-0.000516\n-0.008275\n-0.001849\n-0.002534\n0.003030\n\n\n2024-01-08\n0.024175\n0.003768\n-0.007816\n0.002482\n-0.001451\n0.007374\n0.018872\n0.008615\n0.012464\n0.014317\n-0.016662\n\n\n2024-01-09\n-0.002263\n-0.000203\n0.000319\n0.000619\n-0.007906\n-0.001830\n0.002936\n0.004103\n-0.022832\n-0.006716\n-0.012386\n\n\n\n\n\n\n\n\n\n3. Portfolio Construction using MVO\nWith the returns DataFrame ready, we can now construct an optimal portfolio using Riskfolio-Lib. Mean-Variance Optimization (MVO) is a mathematical framework that solves for the portfolio allocation offering the highest expected return for a given level of risk.\nSteps:\n\nCreate a Portfolio Object: Start by creating a portfolio object from Riskfolio-Lib. This object takes the returns DataFrame as an input.\nConfig Estimation Methods: Since the returns dataframe is sourced from historical price data, we configure both mean and covariance estimation methods to use historical statistics.\nSet model parameters:\n\nmodel= Classic : Refers to classical Mean-Variance Optimization (MVO)\nrm= MV: Risk measure set to variance (Minimizing Variance)\nobj= Sharpe: Optimization objective set to maximize the Sharpe Ratio (risk-adjusted return)\nhist = True: Use historical scenarios for risk measures that depend on scenarios\nannual_rf= 0.0312: The Annual risk-free rate in Canada (2024 - 2025)\ndaily_rf : Annual risk-free rate converted to daily risk-free rate\n\nSet Constraints:\n\nConstraints ensure the portfolio remains diversified and avoids overconcentration in specific assets.\nMaximum Position Size: In this portfolio, I set a constraint where no single asset can exceed 30% of the portfolio allocation.\nMinimum Position Size: In this portfolio, I set a constraint where no single asset can be below 1% of the portfolio allocation. This is to ensure that all assets get some allocation.\n\nGet optimal portfolio weights:\n\nThe port.optimization method in Riskfolio-Lib uses a mathematical optimization library called CVXPY to return the optimal portfolio weights.\nThis is a convex optimization problem, meaning it is computationally efficient and guarantees a global optimum.\n\n\n\npd.options.display.float_format = '{:.2f}'.format\n\n# Create Portfolio Object\nport = rp.Portfolio(returns=returns)\n\n# Set the estimation methods for expected returns and covariance\nmethod_mu = \"hist\"\nmethod_cov = \"hist\"\n\n# Update the portfolio object to use these methods\nport.assets_stats(method_mu=method_mu, method_cov=method_cov)\n\n# Estimate optimal portfolio:\nmodel='Classic'\nrm = 'MV' # Risk measure used - variance\nobj = 'Sharpe' # Objective function\nhist = True # Use historical scenarios for risk measures that depend on scenarios\nannual_rf = 0.0312 # Annual risk-free rate\ndaily_rf = (1 + annual_rf) ** (1/252) - 1 # Convert to daily risk-free rate\n\n# Set Constraints \nasset_classes = pd.read_excel(\"../data/portfolio_opt.xlsb\", sheet_name=1)\nconstraints = pd.read_excel(\"../data/portfolio_opt.xlsb\", sheet_name=2)\n\nA, B = rp.assets_constraints(constraints, asset_classes)\n\nport.ainequality = A\nport.binequality = B\n\n# mean-variance optimization framework\nw = port.optimization(model=model, \n                      rm=rm, \n                      obj=obj, \n                      rf=daily_rf, \n                      hist=hist) \n\n# Display Weights\nprint(w)\n\n      weights\nAAPL     0.17\nAGG      0.01\nGLD      0.30\nJNJ      0.01\nJPM      0.23\nKO       0.01\nMSFT     0.01\nPG       0.22\nTSLA     0.02\nVNQ      0.01\nXOM      0.01\n\n\n\n\n4. Visualization: Displaying results through allocation breakdowns and efficient frontiers\nVisualization is a key step in understanding and communicating the outcome of portfolio optimization. In this section, I’ll introduce some of the built in visualisations that Riskfolio-Lib has to help us understand our optimal portfolio. These visuals help illustrate the practical implications of MVO.\n\nVisualising Portfolio Weights\n\nWe can visualise the portfolio weights (w) using a donut chart\nRiskfolio-Lib has a built in method called rp.plot_pie() that does this for us.\n\nKey Observations:\nThe portfolio has made sizable allocations to the following assets:\n\nGLD (30%): Gold plays a significant role in the portfolio due to its diversification benefits. Its returns has lower correlations to those of stocks. This helps reduce overall portfolio risk and makes it an attractive choice for stability.\nProctor & Gamble (22.2%): A stable, defensive consumer goods stock.\nJP Morgan (22.8%): Exposure to the financial sector.\nApple (16.9%): Exposure to the technology sector.\n\n\n# Plot the portfolio weights determined by MVO\nax = rp.plot_pie(w=w, title='Portfolio allocation (using Sharpe MVO)')\n\n\n\n\n\n\n\n\n\n\nVisualising Risk Contribution\n\nWe can also assess the portfolio’s risk contribution per asset\nRiskfolio-Lib has a built in method called rp.plot_risk_con() that creates a bar chart.\nRisk contribution provides insight into whether the portfolio’s risk is diversified or concentrated in specific assets.\n\n\n# Plot the risk contributions of each stock\nax = rp.plot_risk_con(\n    w,\n    cov=port.cov, #Portfolio's covariance matrix\n    returns=port.returns, #Portfolio returns\n    rm=\"MV\", # Risk measure used - variance\n    rf=daily_rf\n)\n\n\n\n\n\n\n\n\n\n\nVisualising The Efficient Frontier\n\nThe Efficient Frontier is arguably the most instructive visualization in Mean-Variance Optimization.\nIt represents the set of portfolios that offer the highest expected return for a given level of risk.\nEach point along the efficient frontier corresponds to a portfolio optimized for a specific target return or level of risk, demonstrating the trade-off between risk and return.\nIn the EF below, the optimal portfolio (‘w’), which maximises the sharpe ratio, is marked with a red star.\n\nSteps:\n\nCreate the points of the frontier: Use the port.efficient_frontier() method. This method calculates a range of portfolios by varying the risk or return targets, ensuring the results span the entire efficient frontier.\nVisualise the efficient frontier: Use the rp.plot_frontier() method to plot the efficient frontier and highlight the optimal portfolio.\n\n\n#Create the points of the frontier\npoints = 50 # Number of points of the frontier\nfrontier = port.efficient_frontier(model=model, rm=rm, points=points, rf=daily_rf, hist=hist)\n\n# Plotting the efficient frontier\nlabel = 'Max Risk Adjusted Return Portfolio' # Title of optimal portfolio\nmu = port.mu # Expected return of portfolio\ncov = port.cov # Covariance matrix\nreturns = port.returns # Returns of the assets\n\nax = rp.plot_frontier(w_frontier=frontier, mu=mu, cov=cov, returns=port.returns, rm=rm,\n                      rf=daily_rf, alpha=0.05, cmap='viridis', w=w, label=label,\n                      marker='*', s=16, c='r', height=6, width=10, ax=None)\n\n\n\n\n\n\n\n\n\n\n\nTakeaways\nIn this tutorial, we explored how to construct an optimal portfolio using Mean-Variance Optimization (MVO) with Riskfolio-Lib. By following a systematic approach, we successfully applied MVO for portfolio management. Here are some key takeaways:\n\nDiversification is Key: The principle of “not putting all your eggs in one basket” is at the core of portfolio optimization. MVO helps ensure that portfolios are well-diversified across assets, reducing the impact of individual asset volatility.\nSystematic Allocation: MVO uses mathematical optimization to take emotions out of investment decisions, allocating capital in a way that balances risk and return efficiently.\nEfficient Frontier Insights: The efficient frontier visualizes the trade-off between risk and return, offering a roadmap for constructing portfolios that align with an investor’s risk tolerance and return expectations.\nConstraints Matter: Constraints like maximum position sizes (e.g., no more than 30% in one asset) and minimum allocations (e.g., at least 1% per asset) play an important role in making portfolios realistic and implementable.\nHow Often Should You Run MVO?: It depends. But I offer three reasonable suggestions.\n\n\nAnnually: For most retail investors, running MVO once a year strikes a good balance between maintaining an optimal allocation and minimizing transaction costs.\nSemi-Annually or Quarterly: In volatile markets or for portfolios with high turnover, rebalancing more frequently can help align the portfolio with changing market dynamics.\nThreshold-Based Rebalancing: Alternatively, rebalance only when allocations deviate significantly (e.g. by more than 5% from the target weights).\n\n\n\nReferences\n\nyfinance Documentation: https://pypi.org/project/yfinance/\nRiskfolio-Lib Documentation: https://riskfolio-lib.readthedocs.io/en/latest/\nMarkowitz, H. (1952). Portfolio Selection. The Journal of Finance, 7(1), 77–91. JSTOR\nCanadian 3-Month Treasury Bill Yield: https://ycharts.com/indicators/canada_3_month_treasury_bill_yield\nBodie, Z., Kane, A., & Marcus, A. J. (2020). Investments (12th ed.). McGraw-Hill Education."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nA Practical Guide to Portfolio Optimization in Python\n\n\n\n\n\nA tutorial on how to perform mean variance optimization in python\n\n\n\n\n\nJason Lee\n\n\n\n\n\n\n\n\n\n\n\n\nBlack Scholes Option Pricing Model\n\n\n\n\n\nAn interactive app to calculates option prices using Black-Scholes\n\n\n\n\n\nJason Lee\n\n\n\n\n\n\n\n\n\n\n\n\nVancouver Real Estate Screener\n\n\n\n\n\nAn interactive app that visualises properties for sale in Vancouver\n\n\n\n\n\nJason Lee\n\n\n\n\n\n\n\n\n\n\n\n\nCalculating Stock Correlations\n\n\n\n\n\nA toy project that explores visualising stock return correlations\n\n\n\n\n\nJason Lee\n\n\n\n\n\n\nNo matching items"
  }
]