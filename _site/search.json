[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jason Lee",
    "section": "",
    "text": "I’m a Data Analyst with 5 years of experience working in the banking industry. I’m a Chartered Financial Analyst (CFA) and a current master of data science student at UBC."
  },
  {
    "objectID": "posts/portfolio_optimisation.html",
    "href": "posts/portfolio_optimisation.html",
    "title": "Portfolio Optimization using Python",
    "section": "",
    "text": "Introduction\nTo achieve financial independence, everyone should learn how to invest and manage their own portfolio. If you come from a data science / finance background, wouldn’t it be great to employ financial / data science techniques to obtain a greater degree of control over your investments. Using a systematic approach to determine portfolio allocation is ideal in scenarios where you want to be disciplined and remove emotions from investing. With easy to access python libraries like Pandas, yfinance, and Riskfolio-Lib, as retail investors, we too can use techniques that wealth managers and financial institutions use. This tutorial will go over how to perform mean-variance optimization (MVO) to obtain an optimal and efficient portfolio.\n\n\nBackground\nI’m Jason Lee, a Chartered Financial Analyst (CFA) who has worked in the financial industry for 5+ years. I’m currently a UBC master of data science graduate student. I don’t claim to be a financial advisor. All investing incurs an element of risk and should be heeded with caution. I just want to provide a framework that investors can use to test investing ideas and aid them on their journey to financial independence.\n\n\nWorkflow\n\nProblem Definition: Setting investment goals and constraints\nData Collection: Importing data from yfinance (Yahoo finance)\nPortfolio Construction: Using Riskfolio-Lib to create efficient portfolios\nVisualization: Displaying results through efficient frontiers and allocation breakdowns\n\n\n\nProblem Definition\nIn order to set investment goals, we need to understand the following: 1. Ability to take risk 2. Willingness to take risk 3. Time horizon 4. Liquidity needs\nInvestor profile: The investor is a working professional in their mid-twenties. Since they plan to retire at 65, they have a long time horizon of 40 years. With a long time horizon, they have a high risk tolerance as they can recover from possible portfolio drawdowns. They currently have $30,000 in liquid assets that they can invest in. They don’t have any large upcoming liquidity needs. Their main liquidity needs come from rent, monthly expenses and car insurance. With this risk profile, they wish to earn 10% annual return.\n\n\nImports\n\nimport pandas as pd\nimport riskfolio as rp\nimport yfinance as yf\nimport matplotlib.pyplot as plt\n\n\n\nData Collection\n\nFor data collection, I will use yfinance\nUsing a few lines of python, it allows users to download market data from Yahoo! Finance’s API yfinance\n\n\n# Define tickers for ETFs\ntickers = ['SPY', 'TLT', 'GLD', 'DBC']  # Equities, Bonds, Gold, Commodities\n\n# Download historical price data\ndata = yf.download(tickers, start=\"2010-01-01\", end=\"2024-12-25\")['Close']\n\n# Calculate daily returns\nreturns = data.pct_change().dropna()\nreturns\n\n[                       0%                       ][**********************50%                       ]  2 of 4 completed[**********************75%***********            ]  3 of 4 completed[*********************100%***********************]  4 of 4 completed\n\n\n\n\n\n\n\n\nTicker\nDBC\nGLD\nSPY\nTLT\n\n\nDate\n\n\n\n\n\n\n\n\n2010-01-05\n0.001189\n-0.000911\n0.002647\n0.006458\n\n\n2010-01-06\n0.017808\n0.016500\n0.000704\n-0.013387\n\n\n2010-01-07\n-0.012442\n-0.006188\n0.004221\n0.001682\n\n\n2010-01-08\n-0.000787\n0.004963\n0.003328\n-0.000447\n\n\n2010-01-11\n-0.003152\n0.013289\n0.001396\n-0.005487\n\n\n...\n...\n...\n...\n...\n\n\n2024-12-18\n-0.009058\n-0.019185\n-0.029803\n-0.012504\n\n\n2024-12-19\n0.000000\n0.001421\n-0.000307\n-0.015141\n\n\n2024-12-20\n0.006399\n0.010434\n0.012011\n0.005694\n\n\n2024-12-23\n0.000765\n-0.004709\n0.005988\n-0.009172\n\n\n2024-12-24\n0.005736\n0.001992\n0.011115\n0.004229\n\n\n\n\n3769 rows × 4 columns\n\n\n\n\n\nPortfolio Construction\n\n# Create Portfolio Object\nport = rp.Portfolio(returns=returns)\n\n# Set the estimation methods for expected returns and covariance\nmethod_mu = \"hist\"\nmethod_cov = \"hist\"\n\n# Update the portfolio object to use these methods\nport.assets_stats(method_mu=method_mu, method_cov=method_cov)\n\n# Estimate optimal portfolio:\n\nmodel='Classic'\nrm = 'MV' # Risk measure used, this time will be variance\nobj = 'Sharpe' # Objective function\nhist = True # Use historical scenarios for risk measures that depend on scenarios\nrf = 0 # Risk free rate\nl = 0 # Risk aversion factor, only useful when obj is 'Utility'\n\n# mean-variance optimization framework\nw = port.optimization(model=model, rm=rm, obj=obj, rf=rf, l=l, hist=hist)\n\n# Display Weights\nprint(w)\n\n          weights\nDBC  6.796966e-10\nGLD  1.456304e-01\nSPY  5.428307e-01\nTLT  3.115389e-01\n\n\n\n\nVisualization\n\n# Plot the portfolio weights determined by equal risk contribution\nax = rp.plot_pie(w=w)\n\n\n\n\n\n\n\n\n\n# Plot the risk contributions of each ETF which as we can see is\n# equal.\nax = rp.plot_risk_con(\n    w,\n    cov=port.cov,\n    returns=port.returns,\n    rm=\"MV\",\n    rf=0.05\n)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Title\nDescription\nLink\n\n\n\n\nBlack Scholes Model\nInteractive app to calculate option prices\nVisit the App\n\n\nVancouver Real Estate Screener\nDescription of project 1\nRead More\n\n\nProject 2\nDescription of project 2\nRead More"
  }
]